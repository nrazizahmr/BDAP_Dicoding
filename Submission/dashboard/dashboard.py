# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iSElUog-B3rHIPmhvpJfdRst8QpIwmBS
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import datetime
from pathlib import Path

def create_yr(df):
    year_day = df.groupby(by="yr").instant.nunique().reset_index()
    year_day.rename(columns={
        "instant": "sum"
    }, inplace=True)

    return year_day

def create_holiday(df):
    holidyday = df.groupby(by="holiday").instant.nunique().reset_index()
    holidyday.rename(columns={
        "instant": "sum"
    }, inplace=True)

    return holidyday

def create_workingday(df):
    workingday = df.groupby(by="workingday").instant.nunique().reset_index()
    workingday.rename(columns={
        "instant": "sum"
    }, inplace=True)

    return workingday

def sidebar(df):
    df["dteday"] = pd.to_datetime(df["dteday"])
    min_date = df["dteday"].min()
    max_date = df["dteday"].max()

    with st.sidebar:
        st.image("https://github.com/nrazizahmr/BDAP_Dicoding/blob/main/Submission/dashboard/bike-share.png?raw=true")

        def on_change():
            st.session_state.date = date

        date = st.date_input(
            label="Rentang Waktu",
            min_value=min_date,
            max_value=max_date,
            value=[min_date, max_date],
            on_change=on_change
        )

    return date

def year(df):
    st.subheader("Year")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="yr",
        y="sum",
        data=df.sort_values(by="yr", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Year", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="y", labelsize=20)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

def month(df):
    st.subheader("Month")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="mnth",
        y="cnt",
        data=df.sort_values(by="mnth", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Month", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

def holiday(df):
    st.subheader("Holiday")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="holiday",
        y="sum",
        data=df.sort_values(by="holiday", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Holiday", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="y", labelsize=20)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

def workingday(df):
    st.subheader("Working Day")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="workingday",
        y="sum",
        data=df.sort_values(by="workingday", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Working Day", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="y", labelsize=20)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

def create_hourly(df):
    hourly_data = df.groupby(by="hr").cnt.sum().reset_index()
    hourly_data.rename(columns={"cnt": "sum"}, inplace=True)
    return hourly_data

def hourly_usage(df):
    st.subheader("Hourly Usage Pattern")
    fig, ax = plt.subplots(figsize=(20, 10))
    sns.lineplot(
        x="hr",
        y="sum",
        data=df,
        marker="o",
        ax=ax
    )
    ax.set_title("Bike Sharing Usage by Hour", loc="center", fontsize=30)
    ax.set_ylabel("Total Usage", fontsize=20)
    ax.set_xlabel("Hour of Day", fontsize=20)
    ax.tick_params(axis="y", labelsize=15)
    ax.tick_params(axis="x", labelsize=15)
    ax.set_xticks(range(0, 24))
    st.pyplot(fig)


if __name__ == "__main__":
    sns.set(style="dark")

    st.header("Bike Sharing Dashboard :bike:")

    # Load datasets
    day_csv = Path(__file__).parents[1] / 'dashboard/day_cleaning.csv'
    hour_csv = Path(__file__).parents[1] / 'dashboard/hour.csv'

    day = pd.read_csv(day_csv)
    hour = pd.read_csv(hour_csv)

    # Sidebar for date selection
    hour["dteday"] = pd.to_datetime(hour["dteday"])
    min_date = hour["dteday"].min()
    max_date = hour["dteday"].max()

    with st.sidebar:
        st.image("https://github.com/nrazizahmr/BDAP_Dicoding/blob/main/Submission/dashboard/bike-share.png?raw=true")

        date = st.date_input(
            label="Rentang Waktu",
            min_value=min_date,
            max_value=max_date,
            value=[min_date, max_date]
        )

    # Filter data for the selected date range
    if len(date) == 2:
        main_hour_df = hour[(hour["dteday"] >= str(date[0])) & (hour["dteday"] <= str(date[1]))]
        main_day_df = day[(day["dteday"] >= str(date[0])) & (day["dteday"] <= str(date[1]))]
    else:
        main_hour_df = hour
        main_day_df = day

    # Hourly analysis
    hourly_df = create_hourly(main_hour_df)
    hourly_usage(hourly_df)

    # Additional analysis (daily)
    year_df = create_yr(main_day_df)
    year(year_df)
    month(main_day_df)
    holiday_df = create_holiday(main_day_df)
    holiday(holiday_df)
    workingday_df = create_workingday(main_day_df)
    workingday(workingday_df)

